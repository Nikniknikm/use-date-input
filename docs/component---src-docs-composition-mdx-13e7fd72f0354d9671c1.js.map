{"version":3,"sources":["webpack:///../src/docs/composition.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","useRef","useState","Playground","styled","createDateAPI","Calendar","CalendarProvider","Day","useCalendarDispatch","useCalendarState","Root","makeStyles","List","ListItem","ListItemText","dateAdapter","DemoHeader","getDay","UnavailableDay","background","backgroundRepeat","backgroundPosition","backgroundSize","isMonday","date","adapter","day","style","cursor","disabled","isDayDisabled","numOfVisibleMonths","numOfColumns","ShortcutList","dateAPI","useStyles","theme","root","backgroundColor","palette","paper","color","primary","main","display","marginTop","verticalAlign","width","startDate","setEndDate","setVisibleFromDate","classes","createNightsSelectHandler","numOfNights","addDays","startOfMonth","handleTenNights","handleSevenNights","handleThreeNights","className","component","dense","aria-label","button","onClick","allowRange","Header","isMDXComponent"],"mappings":"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","file":"component---src-docs-composition-mdx-13e7fd72f0354d9671c1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mark/Documents/dev/use-date-input3/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useRef, useState } from 'react';\nimport { Playground } from 'docz';\nimport styled from \"styled-components\";\nimport { createDateAPI, Calendar, CalendarProvider, Day, useCalendarDispatch, useCalendarState, Root } from \"@use-date-input/core\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { adapter as dateAdapter } from '@use-date-input/date-fns-adapter';\nimport { DemoHeader } from \"../gatsby-theme-docz/components/DemoHeader\";\nimport getDay from \"date-fns/getDay\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst UnavailableDay = makeShortcode(\"UnavailableDay\");\nconst ShortcutList = makeShortcode(\"ShortcutList\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"composition\"\n    }}>{`Composition`}</h1>\n    <p>{`When you want to do more than style the default components through `}<a parentName=\"p\" {...{\n        \"href\": \"https://mark-tate.github.io/use-date-input/theming\"\n      }}>{`theming`}</a>{` you can replace the default components,\nwith either your own components or use the default components to build a new composition.`}</p>\n    <p><inlineCode parentName=\"p\">{`CalendarProvider`}</inlineCode>{` provides a `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` prop to replace named components with your own version.\nThis provides several options`}</p>\n    <ul>\n      <li parentName=\"ul\">{`you can change change behavior of the default components`}</li>\n      <li parentName=\"ul\">{`you can create new compositions of the default components with your own components`}</li>\n    </ul>\n    <p>{`Common use-cases might be to build a composition of a `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` and a shortcut list or compose the `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` together with other UI controls or branding.`}</p>\n    <p>{`If you want to extend/replace components then redefine those components via their name, using the `}<inlineCode parentName=\"p\">{`components`}</inlineCode>{` prop.  `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { adapter as dateAdapter } from '@use-date-input/date-fns-adapter';\nimport { Calendar } from \"../packages/core\";\n\nconst myComponents = {\n    Root: props => { /* My component */ },\n    Header: props => {},\n    AnimatedMonthGroup: props => {},\n    AnimatedGroup: props => {},\n    MonthGroup: props => {},\n    Month: props => {},\n    MonthHeader: props => {},\n    Week: props => {},\n    WeekHeader: props => {},\n    DayOfWeek: props => {},\n    Day: props => {}\n};\n\nconst MyCalendar = () => {\n    return (\n        <Calendar\n            adapter={dateAdapter}\n            components={myComponents}\n        />\n    );\n};\n`}</code></pre>\n    <p>{`For instance, if you want to style days with your own state (such as blocked or un-available), then you simply replace or\nextend the current `}<inlineCode parentName=\"p\">{`Day`}</inlineCode>{` component`}</p>\n    <Playground __position={0} __code={'() => {\\n  // import styled from \\\"styled-components\\\";\\n  // import { adapter as dateAdapter } from \\\"@use-date-input/date-fns-adapter\\\";\\n  // import getDay from \\\"date-fns/getDay\\\";\\n  // import { Calendar, Day } from \\\"@use-date-input/core\\\";\\n  const MONDAY = 1\\n  const UnavailableDay = styled(Day)(props => ({\\n    background: \\'url(\\\"/public/cross.svg\\\")\\',\\n    backgroundRepeat: \\'no-repeat\\',\\n    backgroundPosition: \\'bottom 6px right 5px\\',\\n    backgroundSize: \\'50% 50%, auto\\',\\n  }))\\n  const isMonday = date => getDay(date) === MONDAY\\n  function BlockoutMondaysRenderer(props) {\\n    if (isMonday(props.day)) {\\n      return (\\n        <span style={{ cursor: \\'not-allowed\\' }}>\\n          <UnavailableDay {...props} disabled />\\n        </span>\\n      )\\n    }\\n    return <Day {...props} />\\n  }\\n  return (\\n    <Calendar\\n      adapter={dateAdapter}\\n      components={{\\n        Day: BlockoutMondaysRenderer,\\n      }}\\n      isDayDisabled={isMonday}\\n      numOfVisibleMonths={2}\\n      numOfColumns={2}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      Playground,\n      styled,\n      createDateAPI,\n      Calendar,\n      CalendarProvider,\n      Day,\n      useCalendarDispatch,\n      useCalendarState,\n      Root,\n      makeStyles,\n      List,\n      ListItem,\n      ListItemText,\n      dateAdapter,\n      DemoHeader,\n      getDay,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        // import styled from \"styled-components\";\n        // import { adapter as dateAdapter } from \"@use-date-input/date-fns-adapter\";\n        // import getDay from \"date-fns/getDay\";\n        // import { Calendar, Day } from \"@use-date-input/core\";\n        const MONDAY = 1;\n        const UnavailableDay = styled(Day)(props => ({\n          background: 'url(\"/public/cross.svg\")',\n          backgroundRepeat: \"no-repeat\",\n          backgroundPosition: \"bottom 6px right 5px\",\n          backgroundSize: \"50% 50%, auto\"\n        }));\n\n        const isMonday = date => getDay(date) === MONDAY;\n\n        function BlockoutMondaysRenderer(props) {\n          if (isMonday(props.day)) {\n            return <span style={{\n              cursor: \"not-allowed\"\n            }}>\n                    <UnavailableDay {...props} disabled mdxType=\"UnavailableDay\" />\n                </span>;\n          }\n\n          return <Day {...props} mdxType=\"Day\" />;\n        }\n\n        return <Calendar adapter={dateAdapter} components={{\n          Day: BlockoutMondaysRenderer\n        }} isDayDisabled={isMonday} numOfVisibleMonths={2} numOfColumns={2} mdxType=\"Calendar\" />;\n      }}\n    </Playground>\n    <p>{`Here is an example of `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` composed together with components from Material-UI.  `}</p>\n    <ul>\n      <li parentName=\"ul\">{`A custom header has been added to add Month and Year dropdowns using Material-UI's Formfield component. `}</li>\n      <li parentName=\"ul\">{`A set of shortcuts have been added using Material-UI's List component.`}</li>\n    </ul>\n    <p>{`This example uses a hook called `}<inlineCode parentName=\"p\">{`useCalendarDispatch`}</inlineCode>{`, to access dispatch methods, allowing you to dispatch actions to the reducer\nfrom your custom Root.`}</p>\n    <p>{`For brevity, additional source for the custom Header can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mark-tate/use-date-input/tree/master/src/gatsby-theme-docz/components/DemoHeader.js\"\n      }}>{`here`}</a></p>\n    <p>{`In the example below, select a startDate, to see a list of shortcuts appear.`}</p>\n    <Playground __position={1} __code={'() => {\\n  // import { createDateAPI, Calendar, CalendarProvider, useCalendarDispatch, useCalendarState, Root } from \\\"@use-date-input/core\\\";\\n  // import { adapter as dateAdapter } from \\\"@use-date-input/date-fns-adapter\\\";\\n  // import { makeStyles } from \\'@material-ui/core/styles\\';\\n  // import List from \\'@material-ui/core/List\\';\\n  // import ListItem from \\'@material-ui/core/ListItem\\';\\n  // import ListItemText from \\'@material-ui/core/ListItemText\\';\\n  const ShortcutList = () => {\\n    const dateAPI = createDateAPI({ adapter: dateAdapter })\\n    const useStyles = makeStyles(theme => ({\\n      root: {\\n        backgroundColor: theme.palette.background.paper,\\n        color: theme.palette.primary.main,\\n        display: \\'inline-block\\',\\n        marginTop: \\'40px\\',\\n        verticalAlign: \\'top\\',\\n        width: 150,\\n      },\\n    }))\\n    const { startDate } = useCalendarState()\\n    const { setEndDate, setVisibleFromDate } = useCalendarDispatch()\\n    const classes = useStyles()\\n    if (!startDate) {\\n      return null\\n    }\\n    const createNightsSelectHandler = numOfNights => () => {\\n      setEndDate(dateAPI.addDays(startDate, numOfNights))\\n      setVisibleFromDate(dateAPI.startOfMonth(startDate))\\n    }\\n    const handleTenNights = createNightsSelectHandler(10)\\n    const handleSevenNights = createNightsSelectHandler(7)\\n    const handleThreeNights = createNightsSelectHandler(3)\\n    return (\\n      <div className={classes.root}>\\n        <List component=\\\"nav\\\" dense aria-label=\\\"date range shortcuts\\\">\\n          <ListItem button onClick={handleTenNights}>\\n            <ListItemText primary=\\\"Stay for 10 nights\\\" />\\n          </ListItem>\\n          <ListItem button onClick={handleSevenNights}>\\n            <ListItemText primary=\\\"Stay for 7 nights\\\" />\\n          </ListItem>\\n          <ListItem button onClick={handleThreeNights}>\\n            <ListItemText primary=\\\"Stay for 3 nights\\\" />\\n          </ListItem>\\n        </List>\\n      </div>\\n    )\\n  }\\n  const CustomRoot = props => (\\n    <div>\\n      <ShortcutList />\\n      <Root {...props} />\\n    </div>\\n  )\\n  return (\\n    <Calendar\\n      adapter={dateAdapter}\\n      allowRange\\n      components={{\\n        Header: DemoHeader,\\n        Root: CustomRoot,\\n      }}\\n      numOfVisibleMonths={12}\\n      numOfColumns={4}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useRef,\n      useState,\n      Playground,\n      styled,\n      createDateAPI,\n      Calendar,\n      CalendarProvider,\n      Day,\n      useCalendarDispatch,\n      useCalendarState,\n      Root,\n      makeStyles,\n      List,\n      ListItem,\n      ListItemText,\n      dateAdapter,\n      DemoHeader,\n      getDay,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        // import { createDateAPI, Calendar, CalendarProvider, useCalendarDispatch, useCalendarState, Root } from \"@use-date-input/core\";\n        // import { adapter as dateAdapter } from \"@use-date-input/date-fns-adapter\";\n        // import { makeStyles } from '@material-ui/core/styles';\n        // import List from '@material-ui/core/List';\n        // import ListItem from '@material-ui/core/ListItem';\n        // import ListItemText from '@material-ui/core/ListItemText';\n        const ShortcutList = () => {\n          const dateAPI = createDateAPI({\n            adapter: dateAdapter\n          });\n          const useStyles = makeStyles(theme => ({\n            root: {\n              backgroundColor: theme.palette.background.paper,\n              color: theme.palette.primary.main,\n              display: 'inline-block',\n              marginTop: '40px',\n              verticalAlign: 'top',\n              width: 150\n            }\n          }));\n          const {\n            startDate\n          } = useCalendarState();\n          const {\n            setEndDate,\n            setVisibleFromDate\n          } = useCalendarDispatch();\n          const classes = useStyles();\n\n          if (!startDate) {\n            return null;\n          }\n\n          const createNightsSelectHandler = numOfNights => () => {\n            setEndDate(dateAPI.addDays(startDate, numOfNights));\n            setVisibleFromDate(dateAPI.startOfMonth(startDate));\n          };\n\n          const handleTenNights = createNightsSelectHandler(10);\n          const handleSevenNights = createNightsSelectHandler(7);\n          const handleThreeNights = createNightsSelectHandler(3);\n          return <div className={classes.root}>\n                <List component=\"nav\" dense aria-label=\"date range shortcuts\" mdxType=\"List\">\n                    <ListItem button onClick={handleTenNights} mdxType=\"ListItem\">\n                        <ListItemText primary=\"Stay for 10 nights\" mdxType=\"ListItemText\" />\n                    </ListItem>\n                    <ListItem button onClick={handleSevenNights} mdxType=\"ListItem\">\n                        <ListItemText primary=\"Stay for 7 nights\" mdxType=\"ListItemText\" />\n                    </ListItem>\n                    <ListItem button onClick={handleThreeNights} mdxType=\"ListItem\">\n                        <ListItemText primary=\"Stay for 3 nights\" mdxType=\"ListItemText\" />\n                    </ListItem>\n                </List>\n            </div>;\n        };\n\n        const CustomRoot = props => <div>\n            <ShortcutList mdxType=\"ShortcutList\" />\n            <Root {...props} mdxType=\"Root\" />\n        </div>;\n\n        return <Calendar adapter={dateAdapter} allowRange components={{\n          Header: DemoHeader,\n          Root: CustomRoot\n        }} numOfVisibleMonths={12} numOfColumns={4} mdxType=\"Calendar\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}