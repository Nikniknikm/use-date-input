(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{n1AX:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return m})),t.d(n,"default",(function(){return f}));var a=t("Fcif"),o=t("+I+c"),r=(t("mXGw"),t("/FXl")),p=t("TjRS"),l=t("ZFoC"),c=t("UutA"),s=t("GYKu"),d=t("esdE"),u=t("5Wd7"),b=t("9jhi"),i=t("PKSg"),m=(t("aD51"),{});void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/theming.mdx"}});h="UnavailableDay";var h,y={_frontmatter:m},O=p.a;function f(e){var n,t,h,f=e.components,_=Object(o.a)(e,["components"]);return Object(r.b)(O,Object(a.a)({},y,_,{components:f,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"theming"},"Theming"),Object(r.b)("h2",{id:"approach"},"Approach"),Object(r.b)("p",null,"Your theme is your own brand, so Calendar comes with just minimal layout styles.  "),Object(r.b)("p",null,"Multiple theming options allow you to theme the UI to match your own brand.   "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"At a high level you can override/extend the default style of the default components.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"At a low level you can override/replace the default components."))),Object(r.b)("p",null,"From this to "),Object(r.b)(l.c,{__position:0,__code:"<Calendar adapter={dateAdapter} numOfColumns={2} numOfVisibleMonths={2} />",__scope:(n={props:_,DefaultLayout:p.a,useDocs:l.i,Link:l.b,Playground:l.c,styled:c.b,Day:s.c,Calendar:s.a,getDay:d.a,eachDayOfInterval:u.a,dateAdapter:b.b,sampleTheme:i.a},n.DefaultLayout=p.a,n._frontmatter=m,n),mdxType:"Playground"},Object(r.b)(s.a,{adapter:b.b,numOfColumns:2,numOfVisibleMonths:2,mdxType:"Calendar"})),Object(r.b)("p",null,"to this"),Object(r.b)(l.c,{__position:1,__code:"<Calendar\n  adapter={dateAdapter}\n  numOfColumns={2}\n  numOfVisibleMonths={2}\n  theme={sampleTheme}\n/>",__scope:(t={props:_,DefaultLayout:p.a,useDocs:l.i,Link:l.b,Playground:l.c,styled:c.b,Day:s.c,Calendar:s.a,getDay:d.a,eachDayOfInterval:u.a,dateAdapter:b.b,sampleTheme:i.a},t.DefaultLayout=p.a,t._frontmatter=m,t),mdxType:"Playground"},Object(r.b)(s.a,{adapter:b.b,numOfColumns:2,numOfVisibleMonths:2,theme:i.a,mdxType:"Calendar"})),Object(r.b)("h2",{id:"how-to-create-a-theme"},"How to create a theme"),Object(r.b)("p",null,"Built upon ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"%22https://styled-components.com%22"}),"styled-components")," each part of the Calendar is\nthemable by overriding/etending the default style.  "),Object(r.b)("p",null,"The full list of styles names that are themable are "),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"|__ Root  \n    |__ Header  \n    |__ MonthGroup  \n        |__ Month  \n            |__ MonthHeader  \n                |__ MonthTitle  \n                |__ YearTitle  \n                |__ PreviousButton  \n                |__ NextButton  \n                |__ WeekHeader  \n                |__ Week  \n                    |__ DayOfWeek  \n                    |__ Day  \n")),Object(r.b)("br",null),"If you want to style existing components then create a new theme to override the default styles, using the `theme` prop.",Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import React from \'react\';\nimport dateAdapter from "./index.esm";\nimport { Calendar } from "./index.esm";\n\nconst yourTheme = {\n    Root: { /* Overidden component style */ },\n    Header: {},\n    MonthGroup: {},\n    Month: {},\n    MonthHeader: {},\n    MonthTitle: {},\n    YearTitle: {},\n    PreviousButton: {},\n    NextButton: {},\n    Week: {},\n    WeekHeader: {},\n    DayOfWeek: {},\n    Day: {}\n};\n\nexport const ThemedCalendar = () => {\n    return (\n        <Calendar\n            adapter={dateAdapter}\n            theme={yourTheme}\n        />\n    );\n};\n')),Object(r.b)("br",null),"If using `input` controls with the hooks, then simply style the elements before using the `use-date-input` hooks to link them to the `Calendar`.",Object(r.b)("h2",{id:"how-to-replace-ui-components"},"How to replace UI components"),Object(r.b)("p",null,"The full list of components names that are replaceable"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"|__ Root  \n    |__ Header  \n    |__ MonthGroup  \n        |__ AnimatedMonthGroup  \n            |__ AnimatedGroup  \n                |__ Month  \n                    |__ MonthHeader  \n                        |__ WeekHeader  \n                        |__ Week  \n                            |__ DayOfWeek  \n                            |__ Day  \n")),Object(r.b)("br",null),"If you want to extend/replace components then redefine those components via their name, using the `components` prop.",Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import React from \'react\';\nimport dateAdapter from "../packages/date-fns-adapter";\nimport { Calendar } from "../packages/core";\n\nconst yourComponents = {\n    Root: props => { /* Overidden component */ },\n    Header: props => {},\n    AnimatedMonthGroup: props => {},\n    AnimatedGroup: props => {},\n    MonthGroup: props => {},\n    Month: props => {},\n    MonthHeader: props => {},\n    Week: props => {},\n    WeekHeader: props => {},\n    DayOfWeek: props => {},\n    Day: props => {}\n};\n\nexport const ThemedCalendar = () => {\n    return (\n        <Calendar\n            adapter={dateAdapter}\n            components={yourComponents}\n        />\n    );\n};\n')),Object(r.b)("br",null),Object(r.b)("p",null,"To extend the UI style or behaviour of the default components, you can provide your own implementation of each component.   "),Object(r.b)("p",null,"For instance, if you want to style days with your own state (such as blocked or un-available), then you simply replace or",Object(r.b)("br",{parentName:"p"}),"\n","extend the current ",Object(r.b)("inlineCode",{parentName:"p"},"Day")," component"),Object(r.b)(l.c,{__position:6,__code:"() => {\n  const UnavailableDay = styled(Day)(props => ({\n    background: 'url(\"/public/cross.svg\")',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'bottom 6px right 5px',\n    backgroundSize: '50% 50%, auto',\n  }))\n  const isMonday = date => getDay(date) === 1\n  function BlockoutMondaysRenderer(props) {\n    if (getDay(props.day) === 1) {\n      return (\n        <span style={{ cursor: 'not-allowed' }}>\n          <UnavailableDay {...props} disabled />\n        </span>\n      )\n    }\n    return <Day {...props} />\n  }\n  return (\n    <Calendar\n      adapter={dateAdapter}\n      components={{\n        Day: BlockoutMondaysRenderer,\n      }}\n      isDayDisabled={isMonday}\n      numOfVisibleMonths={2}\n      numOfColumns={2}\n    />\n  )\n}",__scope:(h={props:_,DefaultLayout:p.a,useDocs:l.i,Link:l.b,Playground:l.c,styled:c.b,Day:s.c,Calendar:s.a,getDay:d.a,eachDayOfInterval:u.a,dateAdapter:b.b,sampleTheme:i.a},h.DefaultLayout=p.a,h._frontmatter=m,h),mdxType:"Playground"},(function(){var e=Object(c.b)(s.c)((function(e){return{background:'url("/public/cross.svg")',backgroundRepeat:"no-repeat",backgroundPosition:"bottom 6px right 5px",backgroundSize:"50% 50%, auto"}}));return Object(r.b)(s.a,{adapter:b.b,components:{Day:function(n){return 1===Object(d.a)(n.day)?Object(r.b)("span",{style:{cursor:"not-allowed"}},Object(r.b)(e,Object(a.a)({},n,{disabled:!0,mdxType:"UnavailableDay"}))):Object(r.b)(s.c,Object(a.a)({},n,{mdxType:"Day"}))}},isDayDisabled:function(e){return 1===Object(d.a)(e)},numOfVisibleMonths:2,numOfColumns:2,mdxType:"Calendar"})})))}void 0!==f&&f&&f===Object(f)&&Object.isExtensible(f)&&!f.hasOwnProperty("__filemeta")&&Object.defineProperty(f,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/theming.mdx"}}),f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-theming-mdx-23eb5ad0eb720e1c42ab.js.map