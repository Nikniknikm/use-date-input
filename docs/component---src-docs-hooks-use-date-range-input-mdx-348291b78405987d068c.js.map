{"version":3,"sources":["webpack:///../src/docs/hooks/useDateRangeInput.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","useCallback","useRef","useState","Props","Playground","useDateRangeInput","Popper","dateAdapter","parse","isValid","startDate","setStartDate","endDate","setEndDate","actions","handleStateChange","changes","state","log","handleStartDateInputChange","event","value","target","handleEndDateInputChange","action","handleCalendarChange","dateAPI","current","rangeStart","rangeEnd","format","Date","Calendar","CalendarProvider","getCalendarProviderProps","getStartDateProps","getEndDateProps","getPopperProps","onChange","adapter","numOfColumns","numOfVisibleMonths","onCalendarChange","onStateChange","placement","style","background","padding","isMDXComponent"],"mappings":"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","file":"component---src-docs-hooks-use-date-range-input-mdx-348291b78405987d068c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mark/Documents/dev/use-date-input3/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useCallback, useRef, useState } from 'react';\nimport { Props, Playground } from 'docz';\nimport { useDateRangeInput } from '@use-date-input/core';\nimport { Popper } from '@use-date-input/popper';\nimport { adapter as dateAdapter } from \"@use-date-input/date-fns-adapter\";\nimport { parse, isValid } from 'date-fns';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CalendarProvider = makeShortcode(\"CalendarProvider\");\nconst Calendar = makeShortcode(\"Calendar\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usedaterangeinput\"\n    }}>{`useDateRangeInput`}</h1>\n    <p><inlineCode parentName=\"p\">{`useDateRangeInput`}</inlineCode>{` is a hook which will provide the props required to compose together a `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` with a pair of`}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` components of your choice.`}</p>\n    <p>{`Like with `}<inlineCode parentName=\"p\">{`useDateInput`}</inlineCode>{` you can use an HTML `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{`, or an `}<inlineCode parentName=\"p\">{`Input`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Formfield`}</inlineCode>{` from your favourite UI framework, or even your own component.`}</p>\n    <p>{`A simple example of use is`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const {\n    Calendar,\n    CalendarProvider,\n    getCalendarProviderProps,\n    getStartDateProps,\n    getEndDateProps,\n    getPopperProps,\n} = useDateRangeInput();\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Calendar`}</inlineCode>{` is the calendar component.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`CalendarProvider`}</inlineCode>{` is the context which wires all the UI components together, you can use it in your own components\nto manage state`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getCalendarProviderProps`}</inlineCode>{` is a callback which provides the props for `}<inlineCode parentName=\"li\">{`CalendarProvider`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getStartDateProps`}</inlineCode>{` is a callback which provides the props for your start date, Input UI Element.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getEndDateProps`}</inlineCode>{` is a callback which provides the props for your end date, Input UI Element.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`getPopperProps`}</inlineCode>{` is an callback which provides the props for any Popper UI Element.  `}</li>\n    </ul>\n    <p>{`Popper's are a portal which are only needed if you are open the Calendar from another component.`}<br parentName=\"p\"></br>{`\n`}{`ie. an Input when clicked display the Calendar in a portal, which overlays the rest of the page.  `}</p>\n    <p>{`When your `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` components and `}<inlineCode parentName=\"p\">{`Calendar`}</inlineCode>{` are composed together by `}<inlineCode parentName=\"p\">{`useDateRangeInput`}</inlineCode>{` it should look like this`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [startDate, setStartDate] = useState(\\'\\')\\n  const [endDate, setEndDate] = useState(\\'\\')\\n  const actions = useRef()\\n  const handleStateChange = useCallback((changes, state) => {\\n    console.log(\\'state changed\\', changes, state)\\n  }, [])\\n  const handleStartDateInputChange = useCallback(event => {\\n    const { value } = event.target\\n    console.log(\\'start date input changed to\\', value)\\n    setStartDate(value)\\n  }, [])\\n  const handleEndDateInputChange = useCallback(event => {\\n    const { value } = event.target\\n    action(\\'end date input changed to\\')(value)\\n    setEndDate(value)\\n  }, [])\\n  const handleCalendarChange = useCallback(value => {\\n    console.log(\\'calendar changed selected date\\', value)\\n    const { dateAPI } = actions.current\\n    const [rangeStart, rangeEnd] = value\\n    setStartDate(rangeStart ? dateAPI.format(rangeStart, \\'dd/MM/yyyy\\') : \\'\\')\\n    setEndDate(rangeEnd ? dateAPI.format(rangeEnd, \\'dd/MM/yyyy\\') : \\'\\')\\n  }, [])\\n  const {\\n    Calendar,\\n    CalendarProvider,\\n    getCalendarProviderProps,\\n    getStartDateProps,\\n    getEndDateProps,\\n    getPopperProps,\\n  } = useDateRangeInput({\\n    actions,\\n    parse: value => parse(value, \\'dd/MM/yyyy\\', new Date()),\\n  })\\n  return (\\n    <>\\n      <input\\n        {...getStartDateProps({ onChange: handleStartDateInputChange })}\\n        value={startDate}\\n      />\\n      <input\\n        {...getEndDateProps({ onChange: handleEndDateInputChange })}\\n        value={endDate}\\n      />\\n      <CalendarProvider\\n        {...getCalendarProviderProps({\\n          adapter: dateAdapter,\\n          numOfColumns: 3,\\n          numOfVisibleMonths: 6,\\n          onCalendarChange: handleCalendarChange,\\n          onStateChange: handleStateChange,\\n        })}\\n      >\\n        <Popper {...getPopperProps({ placement: \\'bottom-start\\' })}>\\n          <div style={{ background: \\'#1FB6FF\\', padding: \\'10px\\' }}>\\n            <Calendar />\\n          </div>\\n        </Popper>\\n      </CalendarProvider>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useCallback,\n      useRef,\n      useState,\n      Props,\n      Playground,\n      useDateRangeInput,\n      Popper,\n      dateAdapter,\n      parse,\n      isValid,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [startDate, setStartDate] = useState('');\n        const [endDate, setEndDate] = useState('');\n        const actions = useRef();\n        const handleStateChange = useCallback((changes, state) => {\n          console.log('state changed', changes, state);\n        }, []);\n        const handleStartDateInputChange = useCallback(event => {\n          const {\n            value\n          } = event.target;\n          console.log('start date input changed to', value);\n          setStartDate(value);\n        }, []);\n        const handleEndDateInputChange = useCallback(event => {\n          const {\n            value\n          } = event.target;\n          action('end date input changed to')(value);\n          setEndDate(value);\n        }, []);\n        const handleCalendarChange = useCallback(value => {\n          console.log('calendar changed selected date', value);\n          const {\n            dateAPI\n          } = actions.current;\n          const [rangeStart, rangeEnd] = value;\n          setStartDate(rangeStart ? dateAPI.format(rangeStart, 'dd/MM/yyyy') : '');\n          setEndDate(rangeEnd ? dateAPI.format(rangeEnd, 'dd/MM/yyyy') : '');\n        }, []);\n        const {\n          Calendar,\n          CalendarProvider,\n          getCalendarProviderProps,\n          getStartDateProps,\n          getEndDateProps,\n          getPopperProps\n        } = useDateRangeInput({\n          actions,\n          parse: value => parse(value, 'dd/MM/yyyy', new Date())\n        });\n        return <>\n            <input {...getStartDateProps({\n            onChange: handleStartDateInputChange\n          })} value={startDate} />\n            <input {...getEndDateProps({\n            onChange: handleEndDateInputChange\n          })} value={endDate} />\n            <CalendarProvider {...getCalendarProviderProps({\n            adapter: dateAdapter,\n            numOfColumns: 3,\n            numOfVisibleMonths: 6,\n            onCalendarChange: handleCalendarChange,\n            onStateChange: handleStateChange\n          })} mdxType=\"CalendarProvider\">\n                <Popper {...getPopperProps({\n              placement: \"bottom-start\"\n            })} mdxType=\"Popper\">\n                    <div style={{\n                background: \"#1FB6FF\",\n                padding: \"10px\"\n              }}>\n                        <Calendar mdxType=\"Calendar\" />\n                    </div>\n                </Popper>\n            </CalendarProvider>\n        </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"actions\"\n    }}>{`Actions`}</h2>\n    <p><inlineCode parentName=\"p\">{`useDateRangeInput`}</inlineCode>{` provides an imperative API for the controlled state, use-case.`}</p>\n    <p>{`Pass a ref to `}<inlineCode parentName=\"p\">{`useDateRangeInput`}</inlineCode>{` and it will be assigned an impertive API of state and helpers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const {\n    Calendar,\n    CalendarProvider,\n    getCalendarProviderProps,\n    getInputProps,\n    getPopperProps,\n} = useDateInput({\n    actions\n});\n`}</code></pre>\n    <p>{`The imperative API takes the form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`actions.current = {\n    createDate, \n    dispatch,\n    mouseClickOutside,\n    navigateNext,\n    navigatePrevious,\n    selectDate,\n    setAnimating,\n    setEnableKeyboardNavigation,\n    setKeyboardCursor,\n    setMouseCursor,\n    setEndDate,\n    setStartDate,\n    setOpen,\n    setKeyPress,\n    setVisibleFromDate\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}