{"version":3,"sources":["webpack:///../src/docs/theming.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useDocs","Link","Playground","styled","Day","Calendar","getDay","eachDayOfInterval","dateAdapter","sampleTheme","adapter","numOfColumns","numOfVisibleMonths","theme","UnavailableDay","background","backgroundRepeat","backgroundPosition","backgroundSize","day","style","cursor","disabled","isDayDisabled","date","isMDXComponent"],"mappings":"4UAcaA,G,UAAe,S,sMAENC,EAKe,iBALrC,IAAsBA,EAMhBC,EAAc,CAClBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,UAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,YADR,YAGA,2GACA,uGACA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAd,yFAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,qEAGJ,sCACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,6EAA8EC,SAAO,GACtHL,QACAH,kBACAS,YACAC,SACAC,eACAC,WACAC,QACAC,aACAC,WACAC,sBACAC,gBACAC,iBAZsH,gBAatHlB,IAbsH,EActHJ,eAdsH,GAerHQ,QAAQ,cACb,YAAC,IAAD,CAAUe,QAASF,IAAaG,aAAc,EAAGC,mBAAoB,EAAGjB,QAAQ,cAE9E,gCACA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,8GAA+GC,SAAO,GACvJL,QACAH,kBACAS,YACAC,SACAC,eACAC,WACAC,QACAC,aACAC,WACAC,sBACAC,gBACAC,iBAZuJ,gBAavJlB,IAbuJ,EAcvJJ,eAduJ,GAetJQ,QAAQ,cACb,YAAC,IAAD,CAAUe,QAASF,IAAaG,aAAc,EAAGC,mBAAoB,EAAGC,MAAOJ,IAAad,QAAQ,cAElG,iBAAQ,CACN,GAAM,yBADR,yBAGA,mCAAkB,6BAAGC,WAAW,KAAQ,CACpC,KAAQ,wCADM,qBAAlB,uFAIA,6EACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,0XAcL,uBAhFK,2HAkFL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2kBA+BL,uBAjHK,mJAoHL,iBAAQ,CACN,GAAM,gCADR,gCAGA,+EACA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,kWAYL,uBApIK,uHAsIL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2qBA6BL,uBACA,qJACA,iJAAgI,kBAAIA,WAAW,MAA/I,2BACqB,0BAAYA,WAAW,KAAvB,OADrB,cAEA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,0wBAAqxBC,SAAO,GAC7zBL,QACAH,kBACAS,YACAC,SACAC,eACAC,WACAC,QACAC,aACAC,WACAC,sBACAC,gBACAC,iBAZ6zB,gBAa7zBlB,IAb6zB,EAc7zBJ,eAd6zB,GAe5zBQ,QAAQ,eACR,WACC,IAAMmB,EAAiBX,YAAOC,IAAPD,EAAY,SAAAT,GAAK,MAAK,CAC3CqB,WAAY,2BACZC,iBAAkB,YAClBC,mBAAoB,uBACpBC,eAAgB,oBAiBlB,OAAO,YAAC,IAAD,CAAUR,QAASF,IAAaf,WAAY,CACjDW,IAbF,SAAiCV,GAC/B,OAA0B,IAAtBY,YAAOZ,EAAMyB,KACR,oBAAMC,MAAO,CAClBC,OAAQ,gBAEF,YAACP,EAAD,eAAoBpB,EAApB,CAA2B4B,UAAQ,EAAC3B,QAAQ,qBAI/C,YAAC,IAAD,eAASD,EAAT,CAAgBC,QAAQ,WAK9B4B,cAhBc,SAAAC,GAAI,OAAqB,IAAjBlB,YAAOkB,IAgBJZ,mBAAoB,EAAGD,aAAc,EAAGhB,QAAQ,sB,oMAOpFH,EAAWiC,gBAAiB","file":"component---src-docs-theming-mdx-23eb5ad0eb720e1c42ab.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/mark/Documents/dev/use-date-input3/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useDocs, Link, Playground } from 'docz';\nimport styled from \"styled-components\";\nimport { Day } from \"@use-date-input/core\";\nimport { Calendar } from \"@use-date-input/core\";\nimport getDay from \"date-fns/getDay\";\nimport eachDayOfInterval from \"date-fns/eachDayOfInterval\";\nimport { dateAdapter } from \"../gatsby-theme-docz/createDate\";\nimport sampleTheme from \"../../stories/sampleTheme\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst UnavailableDay = makeShortcode(\"UnavailableDay\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h1>\n    <h2 {...{\n      \"id\": \"approach\"\n    }}>{`Approach`}</h2>\n    <p>{`Your theme is your own brand, so Calendar comes with just minimal layout styles.  `}</p>\n    <p>{`Multiple theming options allow you to theme the UI to match your own brand.   `}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`At a high level you can override/extend the default style of the default components.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`At a low level you can override/replace the default components.`}</p>\n      </li>\n    </ul>\n    <p>{`From this to `}</p>\n    <Playground __position={0} __code={'<Calendar adapter={dateAdapter} numOfColumns={2} numOfVisibleMonths={2} />'} __scope={{\n      props,\n      DefaultLayout,\n      useDocs,\n      Link,\n      Playground,\n      styled,\n      Day,\n      Calendar,\n      getDay,\n      eachDayOfInterval,\n      dateAdapter,\n      sampleTheme,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Calendar adapter={dateAdapter} numOfColumns={2} numOfVisibleMonths={2} mdxType=\"Calendar\" />\n    </Playground>\n    <p>{`to this`}</p>\n    <Playground __position={1} __code={'<Calendar\\n  adapter={dateAdapter}\\n  numOfColumns={2}\\n  numOfVisibleMonths={2}\\n  theme={sampleTheme}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      useDocs,\n      Link,\n      Playground,\n      styled,\n      Day,\n      Calendar,\n      getDay,\n      eachDayOfInterval,\n      dateAdapter,\n      sampleTheme,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Calendar adapter={dateAdapter} numOfColumns={2} numOfVisibleMonths={2} theme={sampleTheme} mdxType=\"Calendar\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"how-to-create-a-theme\"\n    }}>{`How to create a theme`}</h2>\n    <p>{`Built upon `}<a parentName=\"p\" {...{\n        \"href\": \"%22https://styled-components.com%22\"\n      }}>{`styled-components`}</a>{` each part of the Calendar is\nthemable by overriding/etending the default style.  `}</p>\n    <p>{`The full list of styles names that are themable are `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`|__ Root  \n    |__ Header  \n    |__ MonthGroup  \n        |__ Month  \n            |__ MonthHeader  \n                |__ MonthTitle  \n                |__ YearTitle  \n                |__ PreviousButton  \n                |__ NextButton  \n                |__ WeekHeader  \n                |__ Week  \n                    |__ DayOfWeek  \n                    |__ Day  \n`}</code></pre>\n    <br />  \nIf you want to style existing components then create a new theme to override the default styles, using the `theme` prop.  \n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport dateAdapter from \"./index.esm\";\nimport { Calendar } from \"./index.esm\";\n\nconst yourTheme = {\n    Root: { /* Overidden component style */ },\n    Header: {},\n    MonthGroup: {},\n    Month: {},\n    MonthHeader: {},\n    MonthTitle: {},\n    YearTitle: {},\n    PreviousButton: {},\n    NextButton: {},\n    Week: {},\n    WeekHeader: {},\n    DayOfWeek: {},\n    Day: {}\n};\n\nexport const ThemedCalendar = () => {\n    return (\n        <Calendar\n            adapter={dateAdapter}\n            theme={yourTheme}\n        />\n    );\n};\n`}</code></pre>\n    <br />\nIf using `input` controls with the hooks, then simply style the elements before using the `use-date-input` hooks to\nlink them to the `Calendar`.\n    <h2 {...{\n      \"id\": \"how-to-replace-ui-components\"\n    }}>{`How to replace UI components`}</h2>\n    <p>{`The full list of components names that are replaceable`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`|__ Root  \n    |__ Header  \n    |__ MonthGroup  \n        |__ AnimatedMonthGroup  \n            |__ AnimatedGroup  \n                |__ Month  \n                    |__ MonthHeader  \n                        |__ WeekHeader  \n                        |__ Week  \n                            |__ DayOfWeek  \n                            |__ Day  \n`}</code></pre>\n    <br />\nIf you want to extend/replace components then redefine those components via their name, using the `components` prop.  \n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react';\nimport dateAdapter from \"../packages/date-fns-adapter\";\nimport { Calendar } from \"../packages/core\";\n\nconst yourComponents = {\n    Root: props => { /* Overidden component */ },\n    Header: props => {},\n    AnimatedMonthGroup: props => {},\n    AnimatedGroup: props => {},\n    MonthGroup: props => {},\n    Month: props => {},\n    MonthHeader: props => {},\n    Week: props => {},\n    WeekHeader: props => {},\n    DayOfWeek: props => {},\n    Day: props => {}\n};\n\nexport const ThemedCalendar = () => {\n    return (\n        <Calendar\n            adapter={dateAdapter}\n            components={yourComponents}\n        />\n    );\n};\n`}</code></pre>\n    <br />\n    <p>{`To extend the UI style or behaviour of the default components, you can provide your own implementation of each component.   `}</p>\n    <p>{`For instance, if you want to style days with your own state (such as blocked or un-available), then you simply replace or`}<br parentName=\"p\"></br>{`\n`}{`extend the current `}<inlineCode parentName=\"p\">{`Day`}</inlineCode>{` component`}</p>\n    <Playground __position={6} __code={'() => {\\n  const UnavailableDay = styled(Day)(props => ({\\n    background: \\'url(\\\"/public/cross.svg\\\")\\',\\n    backgroundRepeat: \\'no-repeat\\',\\n    backgroundPosition: \\'bottom 6px right 5px\\',\\n    backgroundSize: \\'50% 50%, auto\\',\\n  }))\\n  const isMonday = date => getDay(date) === 1\\n  function BlockoutMondaysRenderer(props) {\\n    if (getDay(props.day) === 1) {\\n      return (\\n        <span style={{ cursor: \\'not-allowed\\' }}>\\n          <UnavailableDay {...props} disabled />\\n        </span>\\n      )\\n    }\\n    return <Day {...props} />\\n  }\\n  return (\\n    <Calendar\\n      adapter={dateAdapter}\\n      components={{\\n        Day: BlockoutMondaysRenderer,\\n      }}\\n      isDayDisabled={isMonday}\\n      numOfVisibleMonths={2}\\n      numOfColumns={2}\\n    />\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useDocs,\n      Link,\n      Playground,\n      styled,\n      Day,\n      Calendar,\n      getDay,\n      eachDayOfInterval,\n      dateAdapter,\n      sampleTheme,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const UnavailableDay = styled(Day)(props => ({\n          background: 'url(\"/public/cross.svg\")',\n          backgroundRepeat: \"no-repeat\",\n          backgroundPosition: \"bottom 6px right 5px\",\n          backgroundSize: \"50% 50%, auto\"\n        }));\n\n        const isMonday = date => getDay(date) === 1;\n\n        function BlockoutMondaysRenderer(props) {\n          if (getDay(props.day) === 1) {\n            return <span style={{\n              cursor: \"not-allowed\"\n            }}>\n                    <UnavailableDay {...props} disabled mdxType=\"UnavailableDay\" />\n                </span>;\n          }\n\n          return <Day {...props} mdxType=\"Day\" />;\n        }\n\n        return <Calendar adapter={dateAdapter} components={{\n          Day: BlockoutMondaysRenderer\n        }} isDayDisabled={isMonday} numOfVisibleMonths={2} numOfColumns={2} mdxType=\"Calendar\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}