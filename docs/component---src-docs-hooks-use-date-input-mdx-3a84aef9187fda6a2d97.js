(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{H9AE:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return b})),t.d(n,"default",(function(){return C}));var a=t("Fcif"),r=t("+I+c"),o=t("mXGw"),p=t("/FXl"),l=t("TjRS"),i=t("ZFoC"),c=t("GYKu"),s=t("9b5V"),d=t("xrGn"),u=t("gcqE"),b=(t("aD51"),{});void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/hooks/useDateInput.mdx"}});var m=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(p.b)("div",n)}},j=(m("CalendarProvider"),m("Calendar"),{_frontmatter:b}),O=l.a;function C(e){var n,t=e.components,m=Object(r.a)(e,["components"]);return Object(p.b)(O,Object(a.a)({},j,m,{components:t,mdxType:"MDXLayout"}),Object(p.b)("h1",{id:"usedateinput"},"useDateInput"),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"useDateInput")," is a hook which will provide the props required to compose together a ",Object(p.b)("inlineCode",{parentName:"p"},"Calendar"),"\nwith an ",Object(p.b)("inlineCode",{parentName:"p"},"input")," component of your choice."),Object(p.b)("p",null,"You could  use an HTML ",Object(p.b)("inlineCode",{parentName:"p"},"input"),", or an ",Object(p.b)("inlineCode",{parentName:"p"},"Input")," or ",Object(p.b)("inlineCode",{parentName:"p"},"Formfield")," from your favourite UI framework, or even your own component."),Object(p.b)("p",null,"A simple example of use is"),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const {\n    Calendar,\n    CalendarProvider,\n    getCalendarProviderProps,\n    getInputProps,\n    getPopperProps,\n} = useDateInput();\n")),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"Calendar")," is the calendar component."),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"CalendarProvider")," is the context which wires all the UI components together, you can use it in your own components\nto manage state"),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"getCalendarProviderProps")," is a callback which provides the props for ",Object(p.b)("inlineCode",{parentName:"li"},"CalendarProvider")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"getInputProps")," is a callback which provides the props for your Input UI Element."),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"getPopperProps")," is an callback which provides the props for any Popper UI Element.  ")),Object(p.b)("p",null,"Popper's are a portal which are only needed if you are open the Calendar from another component.",Object(p.b)("br",{parentName:"p"}),"\n","ie. an Input when clicked display the Calendar in a portal, which overlays the rest of the page.  "),Object(p.b)("p",null,"When your ",Object(p.b)("inlineCode",{parentName:"p"},"input")," and ",Object(p.b)("inlineCode",{parentName:"p"},"Calendar")," are composed together by ",Object(p.b)("inlineCode",{parentName:"p"},"useDateInput")," it should look like this"),Object(p.b)("h2",{id:"example"},"Example"),Object(p.b)(i.c,{__position:0,__code:"() => {\n  const [date, setDate] = useState('')\n  const actions = useRef()\n  const handleInputChange = event => {\n    const { value } = event.target\n    console.log('input changed to', value)\n    setDate(event.target.value)\n  }\n  const handleCalendarChange = value => {\n    console.log('calendar changed selected date', value)\n    const { dateAPI } = actions.current\n    setDate(dateAPI.format(value, 'dd/MM/yyyy'))\n  }\n  const {\n    Calendar,\n    CalendarProvider,\n    getCalendarProviderProps,\n    getInputProps,\n    getPopperProps,\n  } = useDateInput({\n    actions,\n    parse: value => parse(value, 'dd/MM/yyyy', new Date()),\n  })\n  return (\n    <>\n      <input\n        {...getInputProps({ onChange: handleInputChange })}\n        value={date}\n      />\n      <CalendarProvider\n        {...getCalendarProviderProps({\n          adapter: dateAdapter,\n          onCalendarChange: handleCalendarChange,\n        })}\n      >\n        <Popper {...getPopperProps({ placement: 'bottom-start' })}>\n          <div style={{ background: '#1FB6FF', padding: '10px' }}>\n            <Calendar />\n          </div>\n        </Popper>\n      </CalendarProvider>\n    </>\n  )\n}",__scope:(n={props:m,DefaultLayout:l.a,useCallback:o.useCallback,useRef:o.useRef,useState:o.useState,Playground:i.c,Props:i.d,useDateInput:c.w,Popper:c.k,dateAdapter:s.a,parse:d.a,isValid:u.a},n.DefaultLayout=l.a,n._frontmatter=b,n),mdxType:"Playground"},(function(){var e=Object(o.useState)(""),n=e[0],t=e[1],r=Object(o.useRef)(),l=Object(c.w)({actions:r,parse:function(e){return Object(d.a)(e,"dd/MM/yyyy",new Date)}}),i=l.Calendar,u=l.CalendarProvider,b=l.getCalendarProviderProps,m=l.getInputProps,j=l.getPopperProps;return Object(p.b)(o.Fragment,null,Object(p.b)("input",Object(a.a)({},m({onChange:function(e){var n=e.target.value;console.log("input changed to",n),t(e.target.value)}}),{value:n})),Object(p.b)(u,Object(a.a)({},b({adapter:s.a,onCalendarChange:function(e){console.log("calendar changed selected date",e);var n=r.current.dateAPI;t(n.format(e,"dd/MM/yyyy"))}}),{mdxType:"CalendarProvider"}),Object(p.b)(c.k,Object(a.a)({},j({placement:"bottom-start"}),{mdxType:"Popper"}),Object(p.b)("div",{style:{background:"#1FB6FF",padding:"10px"}},Object(p.b)(i,{mdxType:"Calendar"})))))})),Object(p.b)("h2",{id:"actions"},"Actions"),Object(p.b)("p",null,Object(p.b)("inlineCode",{parentName:"p"},"useDateInput")," provides an imperative API for the controlled state, use-case."),Object(p.b)("p",null,"Pass a ref to ",Object(p.b)("inlineCode",{parentName:"p"},"useDateInput")," and it will be assigned an impertive API of state and helpers."),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const {\n    Calendar,\n    CalendarProvider,\n    getCalendarProviderProps,\n    getInputProps,\n    getPopperProps,\n} = useDateInput({\n    actions\n});\n")),Object(p.b)("p",null,"The imperative API takes the form."),Object(p.b)("pre",null,Object(p.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"actions.current = {\n    createDate, \n    dispatch,\n    mouseClickOutside,\n    navigateNext,\n    navigatePrevious,\n    selectDate,\n    setAnimating,\n    setEnableKeyboardNavigation,\n    setKeyboardCursor,\n    setMouseCursor,\n    setEndDate,\n    setStartDate,\n    setOpen,\n    setKeyPress,\n    setVisibleFromDate\n}\n")))}void 0!==C&&C&&C===Object(C)&&Object.isExtensible(C)&&!C.hasOwnProperty("__filemeta")&&Object.defineProperty(C,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/hooks/useDateInput.mdx"}}),C.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-hooks-use-date-input-mdx-3a84aef9187fda6a2d97.js.map